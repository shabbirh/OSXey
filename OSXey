#!/bin/bash

# ==USER==
user=$(whoami)

# ==HOSTNAME==
hostname=$(HOSTNAME | sed 's/.local//g')
# if hostname is >35 characters, truncates to make it fit on std. 80 window
if [ ${#HOSTNAME} -gt 35 ]
then
   hostname=${HOSTNAME:0:35}
fi

# ==MODEL==
model=$(system_profiler SPHardwareDataType -detailLevel mini | awk '/Model Identifier/ { print $3 }')
# use grep to find the model in the list, then delete from ) to end of line
modelname=`grep $model /usr/local/bin/Models.txt | sed -e 's/).*/)/g'`

# ==VERSION==
versionNumber=$(sw_vers -productVersion) # Finds version number

versionShort=${versionNumber:0:5}  # Cut sting to 1 decimal place for calculation
		 
case $versionShort in
	10.11)
		versionString="El Capitan"
		;;
	10.10)
		versionString="Yosemite"
		;;
	10.9)
		versionString="Mavericks"
		;;
	10.8)
		versionString="Mountian Lion"
		;;
	10.7)
		versionString="Lion"
		;;
	10.6)
		versionString="Snow Leopard"
		;;
	10.5)
		versionString="Leopard"
		;;
	10.4)
		versionString="Tiger"
		;;
	10.3)
		versionString="Panther"
		;;
	10.2)
		versionString="Jaguar"
		;;
	10.1)
		versionString="Puma"
		;;
	10.0)
		versionString="Cheetah"
		;;
esac
	
version="OS X $versionNumber $versionString"

# ==KERNEL==
kernel="XNU"

# ==UPTIME==
uptime=$(uptime | sed 's/.*up \([^,]*\), .*/\1/')

# ==SHELL==
shell="$SHELL"

# ==TERMINAL==
terminal="$TERM"

# ==PACKAGE MANAGER==

# check if brew or macports is installed, then total there packages and set packagehandler 
if [ -e /usr/local/bin/brew ]
then
	brewpackages=$(brew list -l | tail -n +2 | wc -l | tr -d ' ')
	packagehandler="$brewpackages (Homebrew)"
elif [ -f /opt/local/bin/port ] #don't think this is the right directory, need to check later.
then 
	macportpackages="`port installed | wc -l | awk '{print $1 }'` (MacPorts)"
	packagehandler=$macportpackages
fi

# ==CPU==
cpu=$(sysctl -n machdep.cpu.brand_string)
# removes (R) and (TM) from the CPU name so it fits in a standard 80 window
cpu=$(echo "$cpu" | awk '$1=$1' | sed 's/([A-Z]\{1,2\})//g')
 
# ==MEMORY==
mem=$(sysctl -n hw.memsize)
mem="$((mem/1000000000)) GB"

# ==DISK==
disk=`df | head -2 | tail -1 | awk '{print $5}'`

# Colors Variables
red="1"
green="2"
yellow="3"
blue="4"
purple="5"
lightblue="6"
grey="7"

textColor=$(tput setaf $lightblue)
normal=$(tput sgr0)

# While loops for script arguments
while [ $# -gt 0 ]
do
	case "$1" in

    -c|--color) 
			GR='\033[00;32m'
			YE='\033[00;33m'
			LR='\033[01;31m'
			RE='\033[00;31m'
			PU='\033[00;35m'
			CY='\033[00;36m'
			BL='\033[00;34m'
    	    shift
            ;;
	-red)
			textColor=$(tput setaf $red)
			shift
			;;
	-green)
			textColor=$(tput setaf $green)
			shift
			;;
	-yellow)
			textColor=$(tput setaf $yellow)
			shift
			;;
	-blue)
			textColor=$(tput setaf $blue)
			shift
			;;
	-purple)
			textColor=$(tput setaf $purple)
			shift
			;;
	-grey)
			textColor=$(tput setaf $grey)
			shift
			;;
	*)
			break
			;;
	esac
done


userText="${textColor}User:${normal}"
hostnameText="${textColor}Hostname:${normal}"
modelText="${textColor}Model:${normal}"
versionText="${textColor}Version:${normal}"
kernelText="${textColor}Kernel:${normal}"
uptimeText="${textColor}Uptime:${normal}"
shellText="${BL}${textColor}Shell:${normal}"
terminalText="${textColor}Terminal:${normal}"
packagehandlerText="${textColor}Packages:${normal}"
cpuText="${textColor}CPU:${normal}"
memoryText="${textColor}Memory:${normal}"
diskText="${textColor}Disk:${normal}"


echo -e "

${GR}                     ,
${GR}                  ,##;            
${GR}                 ####             $userText $user
${GR}                ;#'               $hostnameText $hostname
${GR}       ,#####;,   ,;#####;,       $modelText $modelname
${GR}     ######################'      $versionText $version
${YE}    #####################'        $kernelText $kernel
${YE}    #####################         $uptimeText $uptime
${LR}    #####################         $shellText $shell
${RE}    ######################,       $terminalText $terminal
${RE}     #######################      $packagehandlerText $packagehandler
${PU}      ####################'       $cpuText $cpu
${BL}        #################'        $memoryText $mem
${BL}         '####''''####'           $diskText $disk
                                       ${normal}
"
